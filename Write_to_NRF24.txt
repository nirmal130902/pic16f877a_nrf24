
 #pragma config FOSC = HS        // Oscillator Selection bits (HS oscillator)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP = OFF        // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD = OFF        // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT = OFF        // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP = OFF         // Flash Program Memory Code Protection bit (Code protection off)

#include <xc.h>
#include "nrf24.h"
#include "spi.h"
#include <string.h>
#define _XTAL_FREQ 20000000


void SPI_Init() {
    TRISC3 = 0; // SCK as output
    TRISC4 = 1; // SDI as input
    TRISC5 = 0; // SDO as output

    SSPSTAT = 0x40; // SMP=1, CKE=0
    SSPCON = 0x20;  // Enable SPI, Master, Fosc/4
}

unsigned char SPI_Transfer(unsigned char data) {
    SSPBUF = data;
    while(!SSPIF);
    SSPIF = 0;
    return SSPBUF;
}


#define CE  RC0
#define CSN RC1

void CE_High()  { CE = 1; }
void CE_Low()   { CE = 0; }
void CSN_High() { CSN = 1; }
void CSN_Low()  { CSN = 0; }

void NRF_WriteReg(unsigned char reg, unsigned char value) {
    CSN_Low();
    SPI_Transfer(0x20 | reg);
    SPI_Transfer(value);
    CSN_High();
}

void NRF_WritePayload(unsigned char* data, unsigned char len) {
    CSN_Low();
    SPI_Transfer(0xA0);
    for (unsigned char i = 0; i < len; i++)
        SPI_Transfer(data[i]);
    CSN_High();
}

void NRF_ReadPayload(unsigned char* data, unsigned char len) {
    CSN_Low();
    SPI_Transfer(0x61);
    for (unsigned char i = 0; i < len; i++)
        data[i] = SPI_Transfer(0xFF);
    CSN_High();
}

void NRF_Init() {
    TRISC0 = 0; // CE
    TRISC1 = 0; // CSN
    CE_Low();
    CSN_High();
    __delay_ms(100);

    NRF_WriteReg(0x00, 0x0A); // Power up, TX mode default
    NRF_WriteReg(0x01, 0x00); // Disable auto-ack
    NRF_WriteReg(0x02, 0x01); // Enable data pipe 0
    NRF_WriteReg(0x03, 0x03); // 5-byte address
    NRF_WriteReg(0x05, 0x02); // Channel 2
    NRF_WriteReg(0x06, 0x0F); // 1Mbps, 0dBm
}

void NRF_TX_Mode(const unsigned char *addr, unsigned char len) {
    // Set TX address
    CSN_Low();
    SPI_Transfer(0x30 | 0x10);
    for (unsigned char i = 0; i < 5; i++) SPI_Transfer(addr[i]);
    CSN_High();

    NRF_WriteReg(0x11, len);       // Set TX payload size
    NRF_WriteReg(0x00, 0x0A);      // Power up, TX mode
}

void NRF_RX_Mode(const unsigned char *addr, unsigned char len) {
    // Set RX address pipe 0
    CSN_Low();
    SPI_Transfer(0x30 | 0x0A);
    for (unsigned char i = 0; i < 5; i++) SPI_Transfer(addr[i]);
    CSN_High();

    NRF_WriteReg(0x11, len);       // RX payload size
    NRF_WriteReg(0x00, 0x0B);      // Power up, RX mode
    CE_High();
    __delay_ms(2);
}

unsigned char NRF_DataReady() {
    CSN_Low();
    SPI_Transfer(0x17);
    unsigned char status = SPI_Transfer(0xFF);
    CSN_High();
    return !(status & 0x01);
}

void NRF_Send(unsigned char* data, unsigned char len) {
    CE_Low();
    NRF_WritePayload(data, len);
    CE_High();
    __delay_us(15);
    CE_Low();
}

void NRF_Receive(unsigned char* data, unsigned char len) {
    NRF_ReadPayload(data, len);
}

__CONFIG(FOSC_HS & WDTE_OFF & PWRTE_ON & CP_OFF & BOREN_ON & LVP_OFF & DEBUG_OFF);

const unsigned char address[5] = {'P','I','C','T','X'};
unsigned char msg[] = "Hello";

void main() {
    TRISB0 = 0; // Debug LED
    SPI_Init();
    NRF_Init();
    NRF_TX_Mode(address, 5);

    while (1) {
        NRF_Send(msg, 5);
        RB0 = !RB0; // Toggle LED
        __delay_ms(1000);
    }
}
